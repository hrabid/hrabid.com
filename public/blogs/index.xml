<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Portfolio</title>
    <link>//localhost:1313/blogs/</link>
    <description>Recent content in Blogs on Portfolio</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Oct 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/blogs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>YAML, The Lingua Franca of IT Infrastructure</title>
      <link>//localhost:1313/blogs/yaml-syntax/</link>
      <pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blogs/yaml-syntax/</guid>
      <description>Learn YAML from basics to advanced: syntax, anchors, tags, schemas, best practices, examples in Python/Go, and common pitfalls.</description>
    </item>
    <item>
      <title>Markdown Syntax</title>
      <link>//localhost:1313/blogs/markdown/</link>
      <pubDate>Tue, 07 Oct 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blogs/markdown/</guid>
      <description>&lt;h1 id=&#34;markdown-tutorial&#34;&gt;Markdown Tutorial&lt;/h1&gt;&#xA;&lt;p&gt;Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by &lt;strong&gt;John Gruber&lt;/strong&gt; in 2004, Markdown is now one of the worldâ€™s most popular markup languages. It is widely used for formatting readme files, writing messages in online discussion forums, and creating rich text using a plain text editor.&lt;/p&gt;&#xA;&lt;p&gt;This tutorial will cover everything you need to know about Markdown, from basic syntax to advanced features. Let&amp;rsquo;s dive in!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux File Permissions</title>
      <link>//localhost:1313/blogs/linux-file-permissions/</link>
      <pubDate>Fri, 03 Oct 2025 15:57:01 +0000</pubDate>
      <guid>//localhost:1313/blogs/linux-file-permissions/</guid>
      <description>&lt;h2 id=&#34;permissions--read-write-execute&#34;&gt;Permissions : Read, Write, Execute&lt;/h2&gt;&#xA;&lt;h3 id=&#34;read-permission-r&#34;&gt;(Read) Permission (&lt;code&gt;r&lt;/code&gt;):&lt;/h3&gt;&#xA;&lt;p&gt;with &lt;code&gt;r&lt;/code&gt; permission user can:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;View the content of a file&lt;/li&gt;&#xA;&lt;li&gt;List the contents of a directory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;write-permission-w&#34;&gt;Write Permission (&lt;code&gt;w&lt;/code&gt;):&lt;/h3&gt;&#xA;&lt;p&gt;with &lt;code&gt;w&lt;/code&gt; permission user can:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Modify a file&lt;/li&gt;&#xA;&lt;li&gt;Create, rename, delete file or dir within a directory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;execute-permission-x&#34;&gt;Execute permission (&lt;code&gt;x&lt;/code&gt;):&lt;/h3&gt;&#xA;&lt;p&gt;with &lt;code&gt;x&lt;/code&gt; permission user can :&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Execute a file as script&lt;/li&gt;&#xA;&lt;li&gt;Can enter in a directory&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;permission-category--user-group-others&#34;&gt;Permission Category : User, Group, Others&lt;/h2&gt;&#xA;&lt;h3 id=&#34;u-for-user&#34;&gt;&lt;code&gt;u&lt;/code&gt; for User&lt;/h3&gt;&#xA;&lt;p&gt;The files owner&lt;/p&gt;</description>
    </item>
    <item>
      <title>Anatomy of .git/ directory</title>
      <link>//localhost:1313/blogs/anatomy-of-git-dir/</link>
      <pubDate>Fri, 03 Oct 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blogs/anatomy-of-git-dir/</guid>
      <description>&lt;p&gt;Git stores all its data in the &lt;code&gt;.git/&lt;/code&gt; directory inside the root of the Project.&lt;/p&gt;&#xA;&lt;h2 id=&#34;gitcommit_editmsg&#34;&gt;&lt;code&gt;.git/COMMIT_EDITMSG&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;A temporary git commit file that holds the commit message of last commit.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;If we use &lt;code&gt;git commit&lt;/code&gt; command  (without the &lt;code&gt;m&lt;/code&gt; flag), it will store what we see in our editor while commiting any changes.  If it&amp;rsquo;s not (using &lt;code&gt;git commit -m &amp;quot;commit message&amp;quot;&lt;/code&gt;),  it will store only the commit message.&lt;/li&gt;&#xA;&lt;li&gt;This file never leaves the local machine &amp;amp; remote doesn&amp;rsquo;t know this file&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;gitconfig&#34;&gt;&lt;code&gt;.git/config&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;#git_core_files&#xA;Text based local/project specific configuration file in  the root of &lt;code&gt;.git&lt;/code&gt; directory.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
